# EMACS settings: -*- tab-width: 2; indent-tabs-mode: t -*-
# vim: tabstop=2:shiftwidth=2:noexpandtab
# kate: tab-width 2; replace-tabs off; indent-width 2;
# 
# ==============================================================================
# Authors:          Patrick Lehmann
#                   Martin Zabel
# 
# Config file:      Global configuration file
# 
# Description:
# ------------------------------------
# This file defines:
#   - common directory names
#   - directory names for sub namespaces
#   - prefixes for namespaces
#
# License:
# ==============================================================================
# Copyright 2020      Martin Zabel, Berlin, Germany
# Copyright 2007-2016 Technische Universitaet Dresden - Germany
#                     Chair of VLSI-Design, Diagnostics and Architecture
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
#
# PoC.alt
# ==============================================================================

# PoC.arith
# ==============================================================================
[IP.arith.addw]
Description =       Adder for wide inputs
tb =                VHDLTestbench
[TB.arith.addw.tb]


[IP.arith.carrychain_inc]
# tb =                VHDLTestbench
# [TB.arith.carrychain_inc.tb]


[IP.arith.counter_free]


[IP.arith.counter_bcd]
tb =                VHDLTestbench
HDLParameters =     DIGITS=9
[TB.arith.counter_bcd.tb]
[XST.arith.counter_bcd.nl]


[IP.arith.counter_gray]


[IP.arith.counter_ring]


[IP.arith.convert_bin2bcd]
tb =                VHDLTestbench
[TB.arith.convert_bin2bcd.tb]


[IP.arith.div]
tb =                VHDLTestbench
[TB.arith.div.tb]


[IP.arith.firstone]
tb =                VHDLTestbench
[TB.arith.firstone.tb]


[IP.arith.muls_wide]


[IP.arith.prefix_and]
tb =                VHDLTestbench
[TB.arith.prefix_and.tb]


[IP.arith.prefix_or]
tb =                VHDLTestbench
[TB.arith.prefix_or.tb]


[IP.arith.prng]
Description =       Pseudo Random Number Generator (PRNG)
tb =                VHDLTestbench
nl1 =               QuartusNetlist
nl2 =               XSTNetlist
nl3 =               LSENetlist
nl4 =               VivadoNetlist
HDLParameters =     BITS=8
[TB.arith.prng.tb]
[QMAP.arith.prng.nl1]
[XST.arith.prng.nl2]
[LSE.arith.prng.nl3]
[VIVADO.arith.prng.nl4]


[IP.arith.same]


[IP.arith.scaler]
tb =                VHDLTestbench
[TB.arith.scaler.tb]


[IP.arith.shifter_barrel]
nl =                XSTNetlist
HDLParameters =     BITS=32
[XST.arith.shifter_barrel.nl]


[IP.arith.sqrt]

# PoC.bus
# ==============================================================================
[IP.bus.Arbiter]
# tb =                VHDLTestbench
# [TB.bus.Arbiter.tb]

# PoC.bus.stream
# ------------------------------------------------------------------------------
[IP.bus.stream.Buffer]


[IP.bus.stream.DeMux]


[IP.bus.stream.FrameGenerator]


[IP.bus.stream.Mirror]


[IP.bus.stream.Mux]


[IP.bus.stream.Sink]


[IP.bus.stream.Source]

# PoC.bus.wb
# ------------------------------------------------------------------------------
[IP.bus.wb.fifo_adapter]


[IP.bus.wb.ocram_adapter]


[IP.bus.wb.uart_wrapper]

# PoC.cache
# ==============================================================================
[IP.cache.cpu]
tb =                VHDLTestbench
nl1 =               XSTNetlist
nl2 =               QuartusNetlist
nl3 =               LSENetlist
nl4 =               VivadoNetlist
# 64 KiByte 4-way set-associative, 4 GiB RAM (2**26 x 512 bit), 64 bytes per cache line
HDLParameters = CACHE_LINES=1024; ASSOCIATIVITY=4; MEM_ADDR_BITS=26; MEM_DATA_BITS=512; CPU_DATA_BITS=32
[TB.cache.cpu.tb]
[XST.cache.cpu.nl1]
[QMAP.cache.cpu.nl2]
[LSE.cache.cpu.nl3]
[VIVADO.cache.cpu.nl4]

[IP.cache.mem]
tb =                VHDLTestbench
nl1 =               XSTNetlist
nl2 =               QuartusNetlist
nl3 =               LSENetlist
nl4 =               VivadoNetlist
# 64 KiByte 4-way set-associative, 4 GiB RAM (2**26 x 512 bit), 64 bytes per cache line
HDLParameters = CACHE_LINES=1024; ASSOCIATIVITY=4; MEM_ADDR_BITS=26; MEM_DATA_BITS=512; CPU_DATA_BITS=32
[TB.cache.mem.tb]
[XST.cache.mem.nl1]
[QMAP.cache.mem.nl2]
[LSE.cache.mem.nl3]
[VIVADO.cache.mem.nl4]

[IP.cache.par]
cocotb =            CocoTestbench
nl1 =               XSTNetlist
nl2 =               QuartusNetlist
nl3 =               LSENetlist
nl4 =               VivadoNetlist
# 64 KiByte 4-way set-associative, 32-bit address space, 64 bytes per cache line
HDLParameters = CACHE_LINES=1024; ASSOCIATIVITY=4; ADDRESS_BITS=26; DATA_BITS=512
[COCOTB.cache.par.cocotb]
[XST.cache.par.nl1]
[QMAP.cache.par.nl2]
[LSE.cache.par.nl3]
[VIVADO.cache.par.nl4]

[IP.cache.par2]
cocotb =            CocoTestbench
nl1 =               XSTNetlist
nl2 =               QuartusNetlist
nl3 =               LSENetlist
nl4 =               VivadoNetlist
# 64 KiByte 4-way set-associative, 32-bit address space, 64 bytes per cache line
HDLParameters = CACHE_LINES=1024; ASSOCIATIVITY=4; ADDR_BITS=32; BYTE_ADDR_BITS=6; DATA_BITS=512
[COCOTB.cache.par2.cocotb]
[XST.cache.par2.nl1]
[QMAP.cache.par2.nl2]
[LSE.cache.par2.nl3]
[VIVADO.cache.par2.nl4]

[IP.cache.replacement_policy]
# tb =                VHDLTestbench
# [TB.cache.replacement_policy.tb]

[IP.cache.tagunit_par]
# tb =                VHDLTestbench
# [TB.cache.tagunit_par.tb]

[IP.cache.tagunit_seq]
# tb =                VHDLTestbench
# [TB.cache.tagunit_seq.tb]

# PoC.comm
# ==============================================================================
[IP.comm.crc]


[IP.comm.scamble]

# PoC.common
# ==============================================================================
[IP.common.config]
tb =                VHDLTestbench
[TB.common.config.tb]
TBName =            ${IP.%{Parent}:Name}

[IP.common.strings]
tb =                VHDLTestbench
[TB.common.strings.tb]
TBName =            ${IP.%{Parent}:Name}

[IP.common.physical]
tb =                VHDLTestbench
[TB.common.physical.tb]
TBName =            ${IP.%{Parent}:Name}


# PoC.dstruct
# ==============================================================================
[IP.dstruct.deque]
tb =                VHDLTestbench
[TB.dstruct.deque.tb]

[IP.dstruct.stack]
tb =                VHDLTestbench
[TB.dstruct.stack.tb]

# PoC.fifo
# ==============================================================================
[IP.fifo.cc_got]
tb =                VHDLTestbench
[TB.fifo.cc_got.tb]

[IP.fifo.cc_got_tempgot]
tb =                VHDLTestbench
[TB.fifo.cc_got_tempgot.tb]
Visibility =        Private

[IP.fifo.cc_got_tempput]
tb =                VHDLTestbench
[TB.fifo.cc_got_tempput.tb]

[IP.fifo.dc_got]


[IP.fifo.ic_got]
tb =                VHDLTestbench
[TB.fifo.ic_got.tb]

[IP.fifo.ic_assembly]
tb =                VHDLTestbench
[TB.fifo.ic_assembly.tb]

[IP.fifo.glue]
# tb =                VHDLTestbench
# [TB.fifo.glue.tb]

[IP.fifo.ic_mem]
tb =                  VHDLTestbench
nl =                  XSTNetlist
HDLParameters =       MEM_ADDR_BITS=30; MEM_DATA_BITS=32 
[TB.fifo.ic_mem.tb]
[XST.fifo.ic_mem.nl]

# PoC.io
# ==============================================================================
[IP.io.Debounce]
tb =                  VHDLTestbench
[TB.io.Debounce.tb]

[IP.io.7SegmentMux_BCD]


[IP.io.7SegmentMux_HEX]


[IP.io.FanControl]
nl =                  XSTNetlist
HDLParameters =       CLOCK_FREQ=100MHz; ADD_INPUT_SYNCHRONIZERS=TRUE; ENABLE_TACHO=FALSE
[XST.io.FanControl.nl]

[IP.io.FrequencyCounter]


[IP.io.GlitchFilter]


[IP.io.PulseWidthModulation]


[IP.io.TimingCounter]

# PoC.io.ddrio
# ------------------------------------------------------------------------------
[IP.io.ddrio.in]
tb =                VHDLTestbench
[TB.io.ddrio.in.tb]

[IP.io.ddrio.inout]
tb =                VHDLTestbench
nl =                XSTNetlist
HDLParameters =     BITS=2
[TB.io.ddrio.inout.tb]
[XST.io.ddrio.inout.nl]
XSTConstraintsFile =  ${XSTDir}/ddrio_inout.xcf

[IP.io.ddrio.out]
tb =                VHDLTestbench
[TB.io.ddrio.out.tb]

# PoC.io.device
# ------------------------------------------------------------------------------

# PoC.io.iic
# ------------------------------------------------------------------------------
[IP.io.iic.BusController]
Visibility =        Private

[IP.io.iic.Controller]
Visibility =        Private
tb =                VHDLTestbench
[TB.io.iic.Controller.tb]


[IP.io.iic.Switch_PCA9548A]
Visibility =        Private

# PoC.io.jtag
# ------------------------------------------------------------------------------

# PoC.io.lcd
# ------------------------------------------------------------------------------
[IP.io.lcd.dotmatrix]


[IP.io.lcd.LCDBuffer]


[IP.io.lcd.LCDSynchronizer]

[IP.io.lcd.ChipScopeVIO]
cg =                CoreGenNetlist
[CG.io.lcd.ChipScopeVIO.cg]
PostCopyRules =     ${DefaultPostCopyNGC}
                    ${DefaultPostCopyVHDL}
                    ${DefaultPostCopyNCF}
                    

# PoC.io.mdio
# ------------------------------------------------------------------------------
[IP.io.mdio.IIC_Adapter]


[IP.io.mdio.Controller]

# PoC.io.ow
# ------------------------------------------------------------------------------
[IP.io.ow.BusController]


[IP.io.ow.Controller]

# PoC.io.pio
# ------------------------------------------------------------------------------
[IP.io.pio.fifo]
tb =                VHDLTestbench
[TB.io.pio.fifo.tb]

# PoC.io.pmod
# ------------------------------------------------------------------------------
[IP.io.pmod.KYPD]


[IP.io.pmod.SSD]


[IP.io.pmod.USBUART]

# PoC.io.uart
# ------------------------------------------------------------------------------
[IP.io.uart.rx]
tb =                VHDLTestbench
[TB.io.uart.rx.tb]

[IP.io.uart.tx]

[IP.io.uart.fifo]
nl1 =               QuartusNetlist
nl2 =               XSTNetlist
nl3 =               VivadoNetlist
nl4 =               LSENetlist
HDLParameters =     CLOCK_FREQ=100MHz; BAUDRATE=115200Bd
[QMAP.io.uart.fifo.nl1]
[XST.io.uart.fifo.nl2]
[VIVADO.io.uart.fifo.nl3]
[LSE.io.uart.fifo.nl4]

[IP.io.uart.ft245]

# PoC.mem
# ==============================================================================
[IP.mem.timeslice_arbiter]
tb =                VHDLTestbench
nl3 =               XSTNetlist
HDLParameters =     PORTS=8; OUTSTANDING_REQ=16
[TB.mem.timeslice_arbiter.tb]
[XST.mem.timeslice_arbiter.nl3]

# PoC.mem.ddr2
# ------------------------------------------------------------------------------
[IP.mem.ddr2.mem2mig_adapter_Spartan6]

# PoC.mem.ddr3
# ------------------------------------------------------------------------------
[IP.mem.ddr3.mem2mig_adapter_Series7]

# PoC.mem.lut
# ------------------------------------------------------------------------------
[IP.mem.lut.Sine]
tb =                VHDLTestbench
[TB.mem.lut.Sine.tb]

# PoC.mem.ocram
# ------------------------------------------------------------------------------
[IP.mem.ocram.esdp]
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     A_BITS=12; D_BITS=16
[TB.mem.ocram.esdp.tb]
[LSE.mem.ocram.esdp.nl1]
[QMAP.mem.ocram.esdp.nl2]
[XST.mem.ocram.esdp.nl3]
[VIVADO.mem.ocram.esdp.nl4]


[IP.mem.ocram.sdp]
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     A_BITS=12; D_BITS=16
[TB.mem.ocram.sdp.tb]
[LSE.mem.ocram.sdp.nl1]
[QMAP.mem.ocram.sdp.nl2]
[XST.mem.ocram.sdp.nl3]
[VIVADO.mem.ocram.sdp.nl4]

[IP.mem.ocram.sdp_wf]
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     A_BITS=12; D_BITS=16
[TB.mem.ocram.sdp_wf.tb]
[LSE.mem.ocram.sdp_wf.nl1]
[QMAP.mem.ocram.sdp_wf.nl2]
[XST.mem.ocram.sdp_wf.nl3]
[VIVADO.mem.ocram.sdp_wf.nl4]

[IP.mem.ocram.sp]
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     A_BITS=12; D_BITS=16
[TB.mem.ocram.sp.tb]
[LSE.mem.ocram.sp.nl1]
[QMAP.mem.ocram.sp.nl2]
[XST.mem.ocram.sp.nl3]
[VIVADO.mem.ocram.sp.nl4]


[IP.mem.ocram.tdp]
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     A_BITS=12; D_BITS=16
[TB.mem.ocram.tdp.tb]
[LSE.mem.ocram.tdp.nl1]
[QMAP.mem.ocram.tdp.nl2]
[XST.mem.ocram.tdp.nl3]
[VIVADO.mem.ocram.tdp.nl4]

[IP.mem.ocram.tdp_wf]
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     A_BITS=12; D_BITS=16
[TB.mem.ocram.tdp_wf.tb]
[LSE.mem.ocram.tdp_wf.nl1]
[QMAP.mem.ocram.tdp_wf.nl2]
[XST.mem.ocram.tdp_wf.nl3]
[VIVADO.mem.ocram.tdp_wf.nl4]


# PoC.mem.ocrom
# ------------------------------------------------------------------------------
[IP.mem.ocrom.sp]


[IP.mem.ocrom.dp]

# PoC.mem.sdram
# ------------------------------------------------------------------------------
[IP.mem.sdram.ctrl_fsm]
tb =				VHDLTestbench
[TB.mem.sdram.ctrl_fsm.tb]

[IP.mem.sdram.ctrl_s3esk]
nl =                XSTNetlist
[XST.mem.sdram.ctrl_s3esk.nl]


[IP.mem.sdram.ctrl_de0]

[IP.mem.sdram.ctrl_qm_xc6slx16_sdram]
nl =                XSTNetlist
[XST.mem.sdram.ctrl_qm_xc6slx16_sdram.nl]
HDLParameters = CLK_PERIOD=10.0; CL=2; BL=8

[IP.mem.sdram.mem2ctrl_adapter]
nl =                XSTNetlist
tb =				VHDLTestbench
[XST.mem.sdram.mem2ctrl_adapter.nl]
HDLParameters = MEM_A_BITS=24; MEM_D_BITS=128; RATIO=8

[TB.mem.sdram.mem2ctrl_adapter.tb]


# PoC.misc
# ==============================================================================
[IP.misc.Delay]


[IP.misc.FrequencyMeasurement]


[IP.misc.PulseTrain]


[IP.misc.Sequencer]


[IP.misc.StrobeGenerator]


[IP.misc.StrobeLimiter]


[IP.misc.WorkAligner]

# PoC.misc.filter
# ------------------------------------------------------------------------------
[IP.misc.filter.and]


[IP.misc.filter.mean]


[IP.misc.filter.or]

# PoC.misc.gearbox
# ------------------------------------------------------------------------------
[IP.misc.gearbox.down_cc]
tb =                  VHDLTestbench
nl =                  XSTNetlist
HDLParameters =       INPUT_BITS=32; OUTPUT_BITS=8; ADD_INPUT_REGISTERS=TRUE; ADD_OUTPUT_REGISTERS=TRUE
[TB.misc.gearbox.down_cc.tb]
[XST.misc.gearbox.down_cc.nl]
XSTConstraintsFile =  ${XSTNoConstraintsFile}


[IP.misc.gearbox.down_dc]
tb =                  VHDLTestbench
nl =                  XSTNetlist
HDLParameters =       INPUT_BITS=32; OUTPUT_BITS=8; ADD_INPUT_REGISTERS=TRUE; ADD_OUTPUT_REGISTERS=TRUE
[TB.misc.gearbox.down_dc.tb]
[XST.misc.gearbox.down_dc.nl]
XSTConstraintsFile =  ${XSTNoConstraintsFile}

[IP.misc.gearbox.up_cc]
tb =                  VHDLTestbench
nl =                  XSTNetlist
HDLParameters =       INPUT_BITS=8; OUTPUT_BITS=32; ADD_INPUT_REGISTERS=TRUE
[TB.misc.gearbox.up_cc.tb]
[XST.misc.gearbox.up_cc.nl]
XSTConstraintsFile =  ${XSTNoConstraintsFile}


[IP.misc.gearbox.up_dc]
tb =                  VHDLTestbench
nl =                  XSTNetlist
HDLParameters =       INPUT_BITS=8; OUTPUT_BITS=32; ADD_INPUT_REGISTERS=TRUE
[TB.misc.gearbox.up_dc.tb]
[XST.misc.gearbox.up_dc.nl]
XSTConstraintsFile =  ${XSTNoConstraintsFile}


# PoC.misc.stat
# ------------------------------------------------------------------------------
[IP.misc.stat.Average]
tb =                VHDLTestbench
[TB.misc.stat.Average.tb]

[IP.misc.stat.Histogram]
tb =                VHDLTestbench
[TB.misc.stat.Histogram.tb]

[IP.misc.stat.Minimum]
tb =                VHDLTestbench
[TB.misc.stat.Minimum.tb]

[IP.misc.stat.Maximum]
tb =                VHDLTestbench
[TB.misc.stat.Maximum.tb]

# PoC.misc.sync
# ------------------------------------------------------------------------------
[IP.misc.sync.Bits]
tb =                VHDLTestbench
nl1 =               QuartusNetlist
nl2 =               XSTNetlist
nl3 =               VivadoNetlist
nl4 =               LSENetlist
[TB.misc.sync.Bits.tb]
[QMAP.misc.sync.Bits.nl1]
[XST.misc.sync.Bits.nl2]
[VIVADO.misc.sync.Bits.nl3]
[LSE.misc.sync.Bits.nl4]

[IP.misc.sync.Reset]
tb =                VHDLTestbench
[TB.misc.sync.Reset.tb]

[IP.misc.sync.Pulse]
# tb =                VHDLTestbench
[TB.misc.sync.Pulse.tb]

[IP.misc.sync.Strobe]
tb =                VHDLTestbench
[TB.misc.sync.Strobe.tb]

[IP.misc.sync.Vector]
tb =                VHDLTestbench
[TB.misc.sync.Vector.tb]

[IP.misc.sync.Command]
tb =                VHDLTestbench
[TB.misc.sync.Command.tb]

# PoC.net
# ==============================================================================
[IP.net.FrameChecksum]


[IP.net.FrameLoopback]

# PoC.net.arp
# ------------------------------------------------------------------------------
[IP.net.arp.BroadCast_Receiver]


[IP.net.arp.BroadCast_Requester]


[IP.net.arp.Cache]


[IP.net.arp.IPPool]


[IP.net.arp.Tester]


[IP.net.arp.UniCast_Receiver]


[IP.net.arp.UniCast_Responder]


[IP.net.arp.Wrapper]

# PoC.net.eth
# ------------------------------------------------------------------------------
[IP.net.eth.GEMAC_GMII]


[IP.net.eth.GEMAC_RX]


[IP.net.eth.GEMAC_TX]

[IP.net.eth.GMII_SGMII_PCS_Virtex5]
cg =                CoreGenNetlist
[XST.net.eth.GMII_SGMII_PCS_Virtex5.nl]
CoreGeneratorFile = ${SrcDir}/Xilinx/Virtex5/${TopLevel}.xco
PostCopyRules =     ${DefaultPostCopyNGC}
                    ${DefaultPostCopyVHDL}


[IP.net.eth.GMII_SGMII_PCS_Virtex6]
cg =                CoreGenNetlist
[XST.net.eth.GMII_SGMII_PCS_Virtex6.nl]
CoreGeneratorFile = ${SrcDir}/Xilinx/Virtex6/${TopLevel}.xco
PostCopyRules =     ${DefaultPostCopyNGC}
                    ${DefaultPostCopyVHDL}

[IP.net.eth.GMII_SGMII_PCS_Series7]
cg =                CoreGenNetlist
[XST.net.eth.GMII_SGMII_PCS_Series7.nl]
CoreGeneratorFile = ${SrcDir}/Xilinx/Series7/${TopLevel}.xco
PostCopyRules =     ${DefaultPostCopyNGC}
                    ${DefaultPostCopyVHDL}


[IP.net.eth.PHYController]


[IP.net.eth.PHYController_Marvell_88E1111]


[IP.net.eth.Wrapper]

# PoC.net.eth10g
# ------------------------------------------------------------------------------
[IP.net.eth10g.PCS_PMA_Series7]
nl =                CoreGenNetlist
[XST.net.eth10g.PCS_PMA_Series7.nl]
CoreGeneratorFile = ${SrcDir}/Xilinx/Series7/${TopLevel}.xco
PostCopyRules =     ${DefaultPostCopyNGC}
                    ${DefaultPostCopyVHDL}
                    ${SPECIAL:OutputDir}/${TopLevel}/example_design/${TopLevel}_block.vhd -> ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}_block.vhdl
                    ${SPECIAL:OutputDir}/${TopLevel}/example_design/gtx/${TopLevel}_gtwizard_10gbaser.vhd -> ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}_gtwizard_10gbaser.vhdl
                    ${SPECIAL:OutputDir}/${TopLevel}/example_design/gtx/${TopLevel}_gtwizard_10gbaser_gt.vhd -> ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}_gtwizard_10gbaser_gt.vhdl
PostReplaceRules =  ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}.vhdl :: "-- synthesis translate_off\n" -> ""
                    ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}.vhdl :: "end eth10g_PCS_PMA_Series7;\n" -> "end eth10g_PCS_PMA_Series7;\n\n-- synthesis translate_off"

# PoC.net.icmpv4
# ------------------------------------------------------------------------------
[IP.net.icmpv4.RX]


[IP.net.icmpv4.TX]


[IP.net.icmpv4.Wrapper]

# PoC.net.icmpv6
# ------------------------------------------------------------------------------
[IP.net.icmpv6.RX]


[IP.net.icmpv6.TX]


[IP.net.icmpv6.Wrapper]

# PoC.net.ipv4
# ------------------------------------------------------------------------------
[IP.net.ipv4.FrameLoopback]


[IP.net.ipv4.RX]


[IP.net.ipv4.TX]


[IP.net.ipv4.Wrapper]

# PoC.net.ipv6
# ------------------------------------------------------------------------------
[IP.net.ipv6.FrameLoopback]


[IP.net.ipv6.RX]


[IP.net.ipv6.TX]


[IP.net.ipv6.Wrapper]

# PoC.net.mac
# ------------------------------------------------------------------------------
[IP.net.mac.FrameLoopback]


[IP.net.mac.RX_DestMAC_Switch]


[IP.net.mac.RX_SrcMAC_Filter]


[IP.net.mac.RX_Type_Switch]


[IP.net.mac.TX_DestMAC_Prepender]


[IP.net.mac.TX_SrcMAC_Prepender]


[IP.net.mac.TX_Type_Prepender]


[IP.net.mac.Wrapper]

# PoC.net.ndp
# ------------------------------------------------------------------------------
[IP.net.ndp.DestinationCache]


[IP.net.ndp.FSMQuery]


[IP.net.ndp.NeighborCache]


[IP.net.ndp.Wrapper]

# PoC.net.stack
# ------------------------------------------------------------------------------
[IP.net.stack.MAC]


[IP.net.stack.IPv4]


[IP.net.stack.IPv6]


[IP.net.stack.UDPv4]


[IP.net.stack.UDPv6]

# PoC.net.udp
# ------------------------------------------------------------------------------
[IP.net.udp.FrameLoopback]


[IP.net.udp.RX]


[IP.net.udp.TX]


[IP.net.udp.Wrapper]


# PoC.sim
# ==============================================================================
[IP.sim.ClockGenerator]
tb =                VHDLTestbench
[TB.sim.ClockGenerator.tb]

[IP.sim.VCDParser]
tb =                VHDLTestbench
[TB.sim.VCDParser.tb]

[IP.sim.Waveform]
Visibility =        Private
tb =                VHDLTestbench
[TB.sim.Waveform.tb]

# PoC.sort
# ==============================================================================
[IP.sort.ExpireList]
tb =                VHDLTestbench
[TB.sort.ExpireList.tb]

[IP.sort.InsertSort]
tb =                VHDLTestbench
[TB.sort.InsertSort.tb]

[IP.sort.LeastFrequentlyUsed]
tb =                VHDLTestbench
[TB.sort.LeastFrequentlyUsed.tb]

[IP.sort.lru_cache]
tb =                VHDLTestbench
cocotb =            CocoTestbench
[TB.sort.lru_cache.tb]
[COCOTB.sort.lru_cache.cocotb]

[IP.sort.lru_list]
# tb =                  VHDLTestbench
cocotb =            CocoTestbench
# [TB.sort.lru_list.tb]
[COCOTB.sort.lru_list.cocotb]

# PoC.sort.sortnet
# ------------------------------------------------------------------------------
[IP.sort.sortnet.BitonicSort]
Visibility =        Private
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     INPUTS=32; KEY_BITS=32; DATA_BITS=64; PIPELINE_STAGE_AFTER=2
[TB.sort.sortnet.BitonicSort.tb]
[LSE.sort.sortnet.BitonicSort.nl1]
# VHDLGenerics = INPUTS=32; KEY_BITS=33; DATA_BITS=65; PIPELINE_STAGE_AFTER=2
[QMAP.sort.sortnet.BitonicSort.nl2]
[XST.sort.sortnet.BitonicSort.nl3]
[VIVADO.sort.sortnet.BitonicSort.nl4]


[IP.sort.sortnet.OddEvenMergeSort]
Visibility =        Private
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     INPUTS=32; KEY_BITS=32; DATA_BITS=64; PIPELINE_STAGE_AFTER=2
[TB.sort.sortnet.OddEvenMergeSort.tb]
[LSE.sort.sortnet.OddEvenMergeSort.nl1]
[QMAP.sort.sortnet.OddEvenMergeSort.nl2]
[XST.sort.sortnet.OddEvenMergeSort.nl3]
[VIVADO.sort.sortnet.OddEvenMergeSort.nl4]

[IP.sort.sortnet.OddEvenSort]
Visibility =        Private
tb =                VHDLTestbench
nl1 =               LSENetlist
nl2 =               QuartusNetlist
nl3 =               XSTNetlist
nl4 =               VivadoNetlist
HDLParameters =     INPUTS=32; KEY_BITS=32; DATA_BITS=64; PIPELINE_STAGE_AFTER=2
[TB.sort.sortnet.OddEvenSort.tb]
[LSE.sort.sortnet.OddEvenSort.nl1]
[QMAP.sort.sortnet.OddEvenSort.nl2]
[XST.sort.sortnet.OddEvenSort.nl3]
[VIVADO.sort.sortnet.OddEvenSort.nl4]


[IP.sort.sortnet.MergeSort_Streamed]


[IP.sort.sortnet.Transform]


[IP.sort.sortnet.Stream_Adapter]
tb =                VHDLTestbench
[TB.sort.sortnet.Stream_Adapter.tb]

[IP.sort.sortnet.Stream_Adapter2]
tb =                VHDLTestbench
[TB.sort.sortnet.Stream_Adapter2.tb]

# PoC.xil
# ==============================================================================
[IP.xil.BSCAN]


[IP.xil.ChipScopeICON]
Dependencies =        CG:PoC.xil.ChipScopeICON_1
                      CG:PoC.xil.ChipScopeICON_2
                      CG:PoC.xil.ChipScopeICON_3
                      CG:PoC.xil.ChipScopeICON_4
                      CG:PoC.xil.ChipScopeICON_5
                      CG:PoC.xil.ChipScopeICON_6
                      CG:PoC.xil.ChipScopeICON_7
                      CG:PoC.xil.ChipScopeICON_8
                      CG:PoC.xil.ChipScopeICON_9
                      CG:PoC.xil.ChipScopeICON_10
                      CG:PoC.xil.ChipScopeICON_11
                      CG:PoC.xil.ChipScopeICON_12
                      CG:PoC.xil.ChipScopeICON_13
                      CG:PoC.xil.ChipScopeICON_14
                      CG:PoC.xil.ChipScopeICON_15

[IP.xil.ChipScopeICON_1]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_1.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_2]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_2.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_3]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_3.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_4]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_4.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_5]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_5.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_6]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_6.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_7]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_7.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_8]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_8.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_9]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_9.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_10]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_10.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_11]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_11.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_12]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_12.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_13]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_13.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_14]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_14.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_15]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeICON_15.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_8x4k]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeILA_8x4k.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_8x32k]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeILA_8x32k.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_16x4k]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeILA_16x4k.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_32x4k]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeILA_32x4k.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_64x4k]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeILA_64x4k.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}

[IP.xil.ChipScopeVIO_8x8]
cg =                  CoreGenNetlist
[CG.xil.ChipScopeVIO_8x8.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
PostCopyRules =       ${DefaultPostCopyNGC}
                      ${DefaultPostCopyVHDL}
                      ${DefaultPostCopyNCF}

[IP.xil.Reconfigurator]


[IP.xil.SystemMonitor]

# PoC.xil.mig
# ------------------------------------------------------------------------------
[IP.xil.mig.Atlys_1x128]
nl =                  XSTNetlist
cg =                  CoreGenNetlist
# step 1: coregen
[CG.xil.mig.Atlys_1x128.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
RulesFile =           ${DefaultRulesFile}
# step 2: generate netlist
[XST.xil.mig.Atlys_1x128.nl]
Dependencies =        CG.xil.mig.Atlys_1x128.cg
# use .files file from "xst" directory
FilesFile =           ${XSTDir}/${IP.%{Parent}:EntityPrefix}_${IP.%{Parent}:Name}.files
RulesFile =           ${DefaultRulesFile}
XSTConstraintsFile =  ${XSTDir}/${TopLevel}.xcf
# example for different clock and no clock buffer
#HDLParameters =  C3_CLKOUT2_DIVIDE=8; C3_INPUT_CLK_TYPE="NONE"


[IP.xil.mig.KC705_MT8JTF12864HZ_1G6]
nl =                  XSTNetlist
cg =                  CoreGenNetlist
# step 1: coregen
[CG.xil.mig.KC705_MT8JTF12864HZ_1G6.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
RulesFile =           ${DefaultRulesFile}
tempDir =             ${SPECIAL:OutputDir}/${TopLevel}
dstDir =              ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}
# step 2: generate netlist
[XST.xil.mig.KC705_MT8JTF12864HZ_1G6.nl]
Dependencies =        CG.xil.mig.KC705_MT8JTF12864HZ_1G6.cg
# use .files file from "xst" directory
FilesFile =           ${XSTDir}/${IP.%{Parent}:EntityPrefix}_${IP.%{Parent}:Name}.files
RulesFile =           ${DefaultRulesFile}
XSTConstraintsFile =  ${XSTDir}/${TopLevel}.xcf
netlistDir =          ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}
# set TEMP_MON_CONTROL="EXTERNAL" if the temperature is supplied by an external XADC instance
HDLParameters =       TEMP_MON_CONTROL="INTERNAL"

[IP.xil.mig.QM_XC6SLX16_DDR3]
nl =                  XSTNetlist
cg =                  CoreGenNetlist
# step 1: coregen
[CG.xil.mig.QM_XC6SLX16_DDR3.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
RulesFile =           ${DefaultRulesFile}
# step 2: generate netlist
[XST.xil.mig.QM_XC6SLX16_DDR3.nl]
Dependencies =        CG.xil.mig.QM_XC6SLX16_DDR3.cg
# use .files file from "xst" directory
FilesFile =           ${XSTDir}/${IP.%{Parent}:EntityPrefix}_${IP.%{Parent}:Name}.files
RulesFile =           ${DefaultRulesFile}
XSTConstraintsFile =  ${XSTDir}/${TopLevel}.xcf
# example for different user clock frequency of 650 / 16 = 40.25 MHz
#HDLParameters =  C3_CLKOUT2_DIVIDE=16;

[IP.xil.mig.ZTEX204_XC6SLX16_DDR]
nl =                  XSTNetlist
cg =                  CoreGenNetlist
# step 1: coregen
[CG.xil.mig.ZTEX204_XC6SLX16_DDR.cg]
CoreGeneratorFile =   ${SrcDir}/${TopLevel}.xco
RulesFile =           ${DefaultRulesFile}
# step 2: generate netlist
[XST.xil.mig.ZTEX204_XC6SLX16_DDR.nl]
Dependencies =        CG.xil.mig.ZTEX204_XC6SLX16_DDR.cg
# use .files file from "xst" directory
FilesFile =           ${XSTDir}/${IP.%{Parent}:EntityPrefix}_${IP.%{Parent}:Name}.files
RulesFile =           ${DefaultRulesFile}
XSTConstraintsFile =  ${XSTDir}/${TopLevel}.xcf
# example for different user clock frequency of 400 / 8 = 50 MHz
#HDLParameters =       C3_CLKOUT2_DIVIDE=8

name: Verify PoC and Generate Documentation

on:
  push:
  pull_request:

jobs:
  Build-OSVVM:
    name: Build OSVVM
    runs-on: ubuntu-24.04
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true

      - name: 🔧 Install tcllib
        run: sudo apt-get install -y --no-install-recommends tcllib

      - name: Setup GHDL ${{ inputs.ghdl_backend }}
        uses: ghdl/setup-ghdl@v1
        with:
          version: latest
          backend: llvm

      - name: Prepare
        run: |
          mkdir -p temp/ghdl

      - name: 🔨 Pre-compile OSVVM
        run: |
          cd temp/ghdl

          tee run.tcl <<EOF
          source ../../lib/OSVVM-Scripts/StartGHDL.tcl
          build ../../lib/OsvvmLibraries.pro OsvvmLibraries
          EOF
          printf "=================\n"

          tclsh run.tcl

      - name: 📤 Upload 'GHDL-OSVVM-Report' artifacts
        uses: pyTooling/upload-artifact@v4
        continue-on-error: true
        with:
          name: GHDL-OSVVM-Report
          working-directory: temp/ghdl
          path: |
            logs
            reports
            *.html
            *.xml
            *.yml
          retention-days: 1

      - name: 📤 Upload 'GHDL-OSVVM' artifacts
        uses: pyTooling/upload-artifact@v4
        with:
          name: GHDL-OSVVM
          working-directory: temp/ghdl
          path: |
            VHDL_LIBS
          retention-days: 1

  Build-PoC:
    name: Build PoC
    runs-on: ubuntu-24.04
    needs:
      - Build-OSVVM
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true

      - name: 🔧 Install tcllib
        run: sudo apt-get install -y --no-install-recommends tcllib

      - name: Setup GHDL ${{ inputs.ghdl_backend }}
        uses: ghdl/setup-ghdl@v1
        with:
          version: latest
          backend: llvm

      - name: Prepare
        run: |
          mkdir -p temp/ghdl

          mv src/common/my_project.vhdl.template tb/common/my_project.vhdl

      - name: 📥 Download artifacts 'GHDL-OSVVM' from 'Build-OSVVM' job
        uses: pyTooling/download-artifact@v4
        with:
          name: GHDL-OSVVM
          path: temp/ghdl

      - name: 🔨 Pre-compile PoC
        run: |
          cd temp/ghdl

          tee run.tcl <<EOF
          source ../../lib/OSVVM-Scripts/StartGHDL.tcl

          variable OMIT_XILINX_FILES 1

          SetExtendedAnalyzeOptions  {-frelaxed -Wno-specs}
          SetExtendedSimulateOptions {-frelaxed -Wno-specs -Wno-binding}

          library PoC
          analyze ../../tb/common/my_project.vhdl
          analyze ../../tb/common/my_config_GENERIC.vhdl

          build ../../src/PoC.pro PoC
          EOF

          printf "=================\n"
          tclsh run.tcl

      - name: 📤 Upload 'GHDL-PoC-Report' artifacts
        uses: pyTooling/upload-artifact@v4
        continue-on-error: true
        with:
          name: GHDL-PoC-Report
          working-directory: temp/ghdl
          path: |
            logs
            reports
            *.html
            *.xml
            *.yml
          retention-days: 1

      - name: 📤 Upload 'GHDL-PoC' artifacts
        uses: pyTooling/upload-artifact@v4
        with:
          name: GHDL-PoC
          working-directory: temp/ghdl
          path: |
            VHDL_LIBS
          retention-days: 1

  Documentation:
    uses: pyTooling/Actions/.github/workflows/SphinxDocumentation.yml@r4
    with:
      requirements:   '-r docs/requirements.txt'
      doc_directory:  'docs'
      html_artifact:  'PoC-HTML'
      latex_artifact: 'PoC-LaTeX'

  PublishToGitHubPages:
    uses: pyTooling/Actions/.github/workflows/PublishToGitHubPages.yml@dev
    needs:
      - Documentation
      - Build-PoC
    with:
      doc:      'PoC-HTML'
#      coverage: 'PoC-Coverage-HTML'

  Release:
    uses: pyTooling/Actions/.github/workflows/NightlyRelease.yml@r4
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
#      - Ubuntu
#      - Windows
#      - PublishCoverageResults
#      - PublishTestResults
      - PublishToGitHubPages
    secrets: inherit
    permissions:
      contents: write
      actions: write
      attestations: write
    with:
      prerelease: true
      replacements: |
        poc=1.3.0
      nightly_name: "v1.3.0"
      nightly_description: |
        # The PoC-Library %poc%
      inventory-json: "inventory.json"
      inventory-version: "1.3.0"
      assets: |
